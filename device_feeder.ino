/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/b8c6c555-8459-4f9a-baf2-3d287927ec0c 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool builtIn_LED;
  bool main_LED;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#include <NewPing.h>
#include <TimeLib.h>
#include <WiFiManager.h>

#define RESET_PIN   D8
#define RELAY_PIN   D1
#define HC          D5
#define TRIGGER_PIN D6
#define ECHO_PIN    D7

NewPing sonar(TRIGGER_PIN, ECHO_PIN);

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);

  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(RESET_PIN, INPUT);
  pinMode(HC, OUTPUT);
  
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  Serial.println("Running...");

  // Initialize SPIFFS
  if (!SPIFFS.begin()) {
    Serial.println("Failed to mount file system");
    return;
  }

  // Connect to Wi-Fi
  connectWiFi();

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  String macAddress = WiFi.macAddress();
  Serial.print("MAC Address: ");
  Serial.println(macAddress);

  delay(2000);
}

float distance = 0;
float surface = 6.1;
float depth = 21;

void loop() {
  if (ArduinoCloud.connected() && feeding_second > 0) {
    unsigned long delayTime = (unsigned long)feeding_second * 1000;

    time_t localTime = ArduinoCloud.getLocalTime();

    int currentHour = hour(localTime);
    int currentMinute = minute(localTime);

    bool first = hour(jadwal_satu) == currentHour && minute(jadwal_satu) == currentMinute ? true : false;
    bool second = hour(jadwal_dua) == currentHour && minute(jadwal_dua) == currentMinute ? true : false;
    
    if(feed) {
      execute(delayTime);
    }

    if(first || second) {
      long moreDelay = delayTime < 60000 ? 60000 - delayTime : 0; 
      execute(delayTime);
      delay(moreDelay);
    }
  }
  
  ArduinoCloud.update();

  if (digitalRead(RESET_PIN) == HIGH) {
    Serial.println("Button pressed, resetting Wi-Fi settings...");

    WiFiManager wifiManager;
    
    wifiManager.resetSettings();

    delay(1000); 
    digitalWrite(LED_BUILTIN, LOW);
    ESP.restart();
  }
}

void connectWiFi() {
  WiFiManager wifiManager;

  if (!wifiManager.autoConnect("AutoConnectAP")) {
    Serial.println("Failed to connect, restarting...");
    delay(3000);
    ESP.restart();
  }
  
  Serial.println("Connected! IP address:");
  Serial.println(WiFi.localIP());

  ArduinoIoTPreferredConnection = WiFiConnectionHandler(WiFi.SSID().c_str(), WiFi.psk().c_str());
  digitalWrite(LED_BUILTIN, HIGH);
}

void execute(long duration) {
  digitalWrite(RELAY_PIN, HIGH);
  digitalWrite(HC, HIGH);

  delay(duration);

  distance = sonar.ping_cm();
  Serial.print("Jarak : ");
  Serial.print(distance);
  Serial.print("cm\n");
  stok = distance < surface ? 100 : distance <= depth ? 100 - (((distance - surface) / (depth - surface)) * 100) : 0;
  // stok = distance < 2 ? 100 : distance < depth ? 100 - ((distance / depth) * 100) : 0;
  // stok = distance;

  Serial.print("Stok  : ");
  Serial.print(stok);
  Serial.print("%\n\n");
  
  digitalWrite(RELAY_PIN, LOW);
  digitalWrite(HC, LOW);
}

void onStokChange()  {
  // Add your code here to act upon Stok change
}

void onJadwalSatuChange()  {
  // Add your code here to act upon JadwalSatu change
}

void onJadwalDuaChange()  {
  // Add your code here to act upon JadwalDua change
}

void onFeedingSecondChange()  {
  // Add your code here to act upon FeedingSecond change
}

void onFeedChange()  {

}
